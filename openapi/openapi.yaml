openapi: 3.0.0
x-samples-languages: ['curl', 'node', 'php', 'javascript', 'python']
info:
  title: GetCandy
  contact:
    name: GetCandy
    url: 'https://getcandy.io'
    email: support@getcandy.io
  version: 1.0.0
  license:
    name: MIT
  description: The GetCandy API
servers:
  - url: 'http://localhost:3000/api/v1'
paths:
  /addresses:
    $ref: './addresses/paths/addresses.yaml'
  '/addresses/{addressId}':
    $ref: './addresses/paths/addresses.id.yaml'
  /channels:
    $ref: './channels/paths/channels.yaml'
  '/channels/{channelId}':
    $ref: './channels/paths/channels.id.yaml'
  /customers:
    $ref: './customers/paths/customers.yaml'
  '/customers/{customerId}/users':
    $ref: './customers/paths/customers.id.users.yaml'
  '/customers/{customerId}/customer-groups':
    $ref: './customers/paths/customers.id.customer-groups.yaml'
  '/customers/{customerId}':
    $ref: './customers/paths/customers.id.yaml'
  '/countries':
    $ref: './countries/paths/countries.yaml'
  '/countries/{countryId}':
    $ref: './countries/paths/countries.id.yaml'
  '/customer-groups':
    $ref: './customer-groups/paths/customer-groups.yaml'
  '/customer-groups/{customerGroupId}':
    $ref: './customer-groups/paths/customer-groups.id.yaml'
  /languages:
    $ref: './languages/paths/languages.yaml'
  '/languages/{languageId}':
    $ref: './languages/paths/languages.id.yaml'
  /routes:
    $ref: './routes/paths/routes.yaml'
  '/routes/{routeId}':
    $ref: './routes/paths/routes.id.yaml'
  '/routes/search':
    $ref: './routes/paths/routes.search.yaml'
  /product-families:
    $ref: './product-families/paths/product-families.yaml'
  '/product-families/{productFamilyId}':
    $ref: './product-families/paths/product-families.id.yaml'
### BELOW: Paths that have not been updated
  /orders:
    get:
      summary: Get orders
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCollection'
      operationId: get-orders
      description: "If you're an admin user you will be able to see all orders, otherwise only the current users orders will be returned."
      parameters:
        - schema:
            type: string
          in: query
          name: include
    post:
      summary: Create Order
      operationId: post-orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                forbidden-example:
                  value:
                    http_code: 403
                    message: This basket already has an order that has been placed
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unprocessable-example:
                  value:
                    basket_id:
                      - The basket id field is required.
      description: Create an Order from a Basket instance
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderBody'
  '/orders/{orderId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get Order
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-orders-orderId
      description: |-
        Get an Order by it's ID.

        You must be an admin or owner to retrieve the order, otherwise you'll get a 404.
    put:
      summary: Update Order
      operationId: put-orders-orderId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
      tags:
        - Orders
      description: Update an Order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tracking_no:
                  type: string
                status:
                  type: string
                  description: Corresponds to status set in config
                send_emails:
                  type: boolean
                  default: false
                  example: true
        description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: include
  /orders/types:
    get:
      summary: Get order types
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderTypeCollection'
              examples:
                order-types-example:
                  value:
                    data:
                      - label: Collection
                      - label: PayPal
                      - label: SagePay
      operationId: get-orders-types
      description: Returns all order types currently in the system
  /orders/process:
    post:
      summary: Processes an order on the API
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-orders-process
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_type_id:
                  type: string
                payment_type:
                  type: string
                order_id:
                  type: string
                payment_token:
                  type: string
                customer_reference:
                  type: string
                meta:
                  type: array
                  items:
                    type: object
                notes:
                  type: string
                company_name:
                  type: string
              required:
                - order_id
                - payment_token
  /attributes:
    get:
      summary: Get Attributes
      tags:
        - Attributes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeCollection'
              examples:
                paginated-example:
                  value:
                    data:
                      - id: dnj4zky5
                        name:
                          en: Name
                          sv: Namn
                        handle: name
                        position: '1'
                        filterable: false
                        scopeable: true
                        translatable: true
                        variant: false
                        searchable: true
                        localised: true
                        type: text
                        required: true
                        lookups: null
                        system: false
                        group:
                          data:
                            id: vokq5kmj
                            name:
                              en: General
                            handle: general
                            position: '1'
                    links:
                      first: 'http://storefront.test/api/v1/attributes?page=1'
                      last: 'http://storefront.test/api/v1/attributes?page=5'
                      prev: null
                      next: 'http://storefront.test/api/v1/attributes?page=2'
                    meta:
                      current_page: 1
                      from: 1
                      last_page: 5
                      path: 'http://storefront.test/api/v1/attributes'
                      per_page: 15
                      to: 15
                      total: 70
      operationId: get-attributes
      parameters: []
      description: Return a paged array of attributes
    post:
      summary: Create Attribute
      tags:
        - Attributes
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeResponse'
              examples:
                post-example:
                  value:
                    data:
                      id: w52log2p
                      name:
                        en: New attribute
                      handle: new-attribute
                      position: 2
                      system: false
                      lookups: null
                      required: false
                      type: text
                      localised: false
                      searchable: false
                      variant: false
                      translatable: false
                      scopeable: false
                      filterable: false
                    meta:
                      lang: en
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  group_id:
                    type: array
                    items:
                      type: string
                  name:
                    type: array
                    items:
                      type: string
                  handle:
                    type: array
                    items:
                      type: string
              examples:
                full-unprocessable:
                  value:
                    group_id:
                      - The group id field is required.
                    name:
                      - The name field is required.
                    handle:
                      - The handle field is required.
      operationId: post-attributes
      description: Create a new attribute
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: string
                  example: q1jo3jm4
                name:
                  type: array
                  items:
                    type: object
                    properties:
                      locale:
                        type: string
                    required:
                      - locale
                handle:
                  type: string
                position:
                  type: integer
                  format: int32
                  example: 12
                filterable:
                  type: boolean
                  default: false
                scopeable:
                  type: boolean
                  default: false
                translatable:
                  type: boolean
                  default: false
                variant:
                  type: boolean
                  default: false
                searchable:
                  type: boolean
                  default: false
                localised:
                  type: boolean
                  default: false
                type:
                  type: string
                  default: text
                required:
                  type: boolean
                  default: false
                lookups:
                  type: array
                  items:
                    type: object
                    properties:
                      label:
                        type: string
                      value:
                        type: string
                system:
                  type: boolean
                  default: false
              required:
                - group_id
                - name
                - handle
            examples:
              post-example:
                value:
                  group_id: q1w24k3l
                  name:
                    en: New attribute
                  handle: new-attribute
                  lookups:
                    label: Lookup 1
                    value: lookup-1
      parameters: []
  /categories:
    get:
      summary: Return a paged array of categories
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCollection'
      operationId: get-categories
      parameters:
        - schema:
            type: boolean
          in: query
          name: full_response
          description: ''
        - schema:
            type: string
          in: query
          name: include
        - schema:
            type: boolean
          in: query
          name: tree
          description: Whether response should be a node tree
      description: Returns a paginated resource of categories
    post:
      summary: Create a new category
      tags:
        - Categories
      operationId: post-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unprocessable:
                  value:
                    url:
                      - The url field is required.
      description: "Creates a new category and returns it's resource."
  '/categories/{categoryId}':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
        description: ''
    get:
      summary: Return a single category
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
              examples: {}
      operationId: get-categories-categoryId
      parameters:
        - schema:
            type: string
          in: query
          name: includes
      description: Returns a single category from a given ID
    put:
      summary: Update a category
      operationId: put-categories-categoryId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttributesBody'
        description: ''
      tags:
        - Categories
      description: Update a category using a given ID.
  /assets:
    put:
      summary: Update Assets
      operationId: put-assets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetBody'
        description: ''
      tags:
        - Assets
      description: Update all assets in the given array of ids.
    post:
      summary: Create Asset
      tags:
        - Assets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
      operationId: post-assets
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAssetBody'
        description: ''
      description: Upload an asset to a model
  /assets/simple:
    post:
      summary: Simple asset upload
      tags:
        - Assets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetSimple'
              examples:
                upload-example:
                  value:
                    path: uploads/01/04/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png
                    filename: the-secret-recipe.png
                    url: 'http://storefront.test/storage/uploads/01/04/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png'
                    thumbnail: uploads/01/04/thumbnails/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png
                    thumbnail_url: 'http://storefront.test/storage/uploads/01/04/thumbnails/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png'
      operationId: post-assets-simple
      description: This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssetSimpleUploadBody'
        description: ''
  '/assets/{assetId}/detach/{ownerId}':
    parameters:
      - schema:
          type: string
        name: assetId
        in: path
        required: true
        description: The hashed asset id
      - schema:
          type: string
        name: ownerId
        in: path
        required: true
        description: The hashed owner id
    post:
      summary: "Detach an asset from it's model"
      tags:
        - Assets
      responses:
        '204':
          description: No Content
      operationId: post-assets-assetId-detach-ownerId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetDetachBody'
      description: Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
  /associations/groups:
    get:
      summary: Paginated array of association groups
      tags:
        - Associations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationGroupCollection'
              examples:
                full-response:
                  value:
                    data:
                      - id: v8l4pl01
                        name: Upsell
                        handle: upsell
                      - id: p09prlrn
                        name: Cross-sell
                        handle: cross-sell
                      - id: wz6d39dj
                        name: Alternate
                        handle: alternate
                    meta:
                      lang: en
                      pagination:
                        total: 3
                        count: 3
                        per_page: 50
                        current_page: 1
                        total_pages: 1
                        links: []
      operationId: get-associations-groups
      description: Returns a paginated response of association groups available in the system
  /attributes/order:
    put:
      summary: Update request to reorder attributes
      tags:
        - Attributes
      responses:
        '204':
          description: No Content
      operationId: put-attributes-order
      description: Allows you to reorder a target category in relation to another.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributesReorderBody'
  '/attributes/{attributeId}':
    parameters:
      - schema:
          type: string
        name: attributeId
        in: path
        required: true
    get:
      summary: Get an attribute
      tags:
        - Attributes
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeResponse'
              examples:
                full-example:
                  value:
                    data:
                      id: dnj4zky5
                      name:
                        en: Name
                        sv: Namn
                      handle: name
                      position: '1'
                      filterable: false
                      scopeable: true
                      translatable: true
                      variant: false
                      searchable: true
                      localised: true
                      type: text
                      required: true
                      lookups: null
                      system: false
                example-with-group:
                  value:
                    data:
                      id: dnj4zky5
                      name:
                        en: Name
                        sv: Namn
                      handle: name
                      position: '1'
                      filterable: false
                      scopeable: true
                      translatable: true
                      variant: false
                      searchable: true
                      localised: true
                      type: text
                      required: true
                      lookups: null
                      system: false
                      group:
                        data:
                          id: vokq5kmj
                          name:
                            en: General
                          handle: general
                          position: '1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      operationId: get-attributes-attributeId
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: ''
      description: Returns an attribute from a given ID.
    put:
      summary: Update an attribute
      operationId: put-attributes-attributeId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                not-found-example:
                  value:
                    error:
                      http_code: 404
                      message: Resource not found
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
              examples:
                validation-example:
                  value:
                    name:
                      - The name field is required.
      description: Updates an attribute from a given ID.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
      tags:
        - Attributes
    delete:
      summary: Delete an attribute
      operationId: delete-attributes-attributeId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                not-found-example:
                  value:
                    error:
                      http_code: 404
                      message: Resource not found
      tags:
        - Attributes
      description: Delete an attribute.
      parameters: []
  /attribute-groups:
    get:
      summary: Paginated list of Attribute Groups
      tags:
        - Attributes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroupCollection'
              examples:
                without-pagination-example:
                  value:
                    data:
                      - id: vokq5kmj
                        name:
                          en: General
                        handle: general
                        position: '1'
                      - id: mqkj8wyj
                        name:
                          en: Meta Information
                          sv: SEO
                        handle: seo
                        position: '2'
                      - id: 96e7nk8r
                        name:
                          en: Default
                        handle: default
                        position: '4'
      operationId: get-attribute-groups
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: all_records
          description: Will skip pagination and return all records
        - schema:
            type: string
          in: query
          name: include
      description: Returns a paginated list of available attribute groups
    post:
      summary: Create an Attribute Group
      tags:
        - Attributes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroupResponse'
              examples:
                created-example:
                  value:
                    data:
                      id: m1wrpejy
                      name:
                        en: New Group
                      handle: new-group
                      position: '13'
      operationId: post-attribute-groups
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAttributeGroupBody'
            examples:
              create-example:
                value:
                  name:
                    en: New Group
                  handle: new-group
  /attribute-groups/reorder:
    put:
      summary: Reorder attribute groups
      tags:
        - Attributes
      responses:
        '204':
          description: No Content
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributesOrderUnprocessableResponse'
              examples:
                uprocessable-response:
                  value:
                    groups:
                      - The groups field is required.
      operationId: put-attribute-groups-reorder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributesReorderBody'
            examples:
              reorder-request-example:
                value:
                  groups:
                    vokq5kmj: 1
                    mqkj8wyj: 2
      description: Sends a request to reorder the attribute groups in the system
  '/attribute-groups/{attributeGroupId}':
    parameters:
      - schema:
          type: string
        name: attributeGroupId
        in: path
        required: true
    put:
      summary: Update an attribute group
      tags:
        - Attributes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroupResponse'
      operationId: put-attribute-groups-attributeGroupId
      description: Updates an attribute group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroup'
    get:
      summary: Get a single attribute group
      tags:
        - Attributes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroupResponse'
              examples:
                full-example:
                  value:
                    data:
                      id: vokq5kmj
                      name:
                        en: General
                      handle: general
                      position: '1'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                not-found-example:
                  value:
                    error:
                      http_code: 404
                      message: Resource not found
      operationId: get-attribute-groups-attributeGroupId
      parameters:
        - schema:
            type: integer
          in: query
          name: include
      description: Gets a single attribute group
    delete:
      summary: Delete an attribute group
      tags:
        - Attributes
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: delete-attribute-groups-attributeGroupId
      description: Deletes an attribute group
  /baskets/resolve:
    post:
      summary: Resolve a basket
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
      operationId: post-baskets-resolve
      description: |-
        This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.

        If you choose not to merge a basket, their current one will be overwritten with the guest basket.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveBasketBody'
  /baskets/current:
    get:
      summary: Get the current basket for a user
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-baskets-current
      description: This request will get the current active basket for a user
  /baskets/saved:
    get:
      summary: Get a users saved baskets
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedBasketCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
              examples:
                example-1:
                  value:
                    error: Unauthenticated.
      operationId: get-baskets-saved
      description: Returns an authenticatd users saved baskets.
  '/baskets/{basketId}/save':
    parameters:
      - schema:
          type: string
        name: basketId
        in: path
        required: true
    post:
      summary: Save a basket for a user
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-baskets-basketId-save
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveBasketBody'
      description: Saves a basket to a users account.
  '/baskets/{basketId}/claim':
    parameters:
      - schema:
          type: string
        name: basketId
        in: path
        required: true
    post:
      summary: Allow a user to claim a basket
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-baskets-basketId-claim
      description: 'A user is able to "claim" a guest basket. '
  '/baskets/{basketId}':
    parameters:
      - schema:
          type: string
        name: basketId
        in: path
        required: true
    delete:
      summary: Delete a basket by ID
      tags:
        - Baskets
      responses:
        '204':
          description: No Content
      operationId: delete-baskets-basketId
      description: Deletes a basket
    get:
      summary: Get basket
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-baskets-basketId
      description: "Get a basket by it's ID"
    put:
      summary: Update a basket by ID
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: put-baskets-basketId
      description: Updates a basket
  '/baskets/saved/{basketId}':
    parameters:
      - schema:
          type: string
        name: basketId
        in: path
        required: true
    put:
      summary: Update a saved basket
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedBasketResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: put-baskets-saved-basketId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveBasketBody'
      description: Updates a saved basket on the API
  '/payments/{transactionId}/refund':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
    post:
      summary: Refund a payment
      tags:
        - Payments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                refund-issued-error:
                  value:
                    http_code: 400
                    message: Refund already issued
                invalid-balance-error:
                  value:
                    http_code: 400
                    message: Amount exceeds remaining balance
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-payments-id-refund
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int32
                  description: 'If left blank, the full amount will be refunded'
                notes:
                  type: string
        description: ''
      description: Refund a transaction
  '/payments/{transactionId}/void':
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
    post:
      summary: Void a payment
      tags:
        - Payments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-payments-transactionId-void
      description: Voids a payment in the system.
  '/categories/parent/{parentId}':
    parameters:
      - schema:
          type: string
        name: parentId
        in: path
        description: If omitted will return top level catgories
        required: true
    get:
      summary: Get categories by parent id
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCollection'
      operationId: get-categories-parent-parentId?
      description: Returns categories by a given parent ID.
      parameters:
        - schema:
            type: string
          in: query
          name: include
  /categories/reorder:
    post:
      summary: Reorder a category
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                success-response:
                  value:
                    status: success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-categories-reorder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderCategoryBody'
  '/categories/{categoryId}/products':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    put:
      summary: Attach products
      operationId: put-categories-categoryId-products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachCategoryProductsBody'
            examples:
              example-1: {}
        description: 'When using "custom" sort type, sorting will be based on the position.'
      description: Attaches products to a category resource.
  '/categories/{categoryId}/channels':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    post:
      summary: Attach channels to a category
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-categories-categoryId-channels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachCategoryChannelsBody'
        description: ''
      description: Attaches channels to a catagory
  '/categories/{categoryId}/drafts':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    post:
      summary: Create or retrieve the current category draft
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-categories-categoryId-drafts
      description: Create or return the current category draft resource.
      parameters:
        - schema:
            type: string
          in: query
          name: include
  '/categories/{categoryId}/customer-groups':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    post:
      summary: Attach customer groups to a category
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  '':
                    $ref: '#/components/schemas/Error'
      operationId: post-categories-categoryId-customer-groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachCategoryCustomerGroupsBody'
      description: Attaches customer groups to a category resource.
  '/categories/{categoryId}/layouts':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    post:
      summary: Update a category layout
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
      operationId: post-categories-category-layouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryAttachLayoutBody'
      description: Attaches layouts to a category resource
  '/categories/{categoryId}/routes':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    post:
      summary: "Update a category's routes"
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-categories-category-routes
      description: Attaches routes to a category resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachCategoryRoutesBody'
  '/collections/{collectionId}/routes':
    parameters:
      - schema:
          type: string
        name: collectionId
        in: path
        required: true
    post:
      summary: "Update a collection's routes"
      tags:
        - Collections
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-collections-collection-routes
      description: This request will allow you to attach routes to a collection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                redirect:
                  type: boolean
                description:
                  type: string
                slug:
                  type: string
                locale:
                  type: string
  '/collections/{collectionId}/products':
    parameters:
      - schema:
          type: string
        name: collectionId
        in: path
        required: true
    post:
      summary: "Update a collection's products"
      tags:
        - Collections
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
      operationId: post-collections-collectionId-products
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  description: Pass all products you wish to be associated.
                  items:
                    type: string
            examples:
              example-with-products:
                value:
                  products:
                    - 4r221sfef
                    - 534fw3r3s
                    - 58823sese
      description: Syncs products with a collection.
  /collections:
    get:
      summary: Get Collections
      tags:
        - Collections
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionCollection'
      operationId: get-collections
      parameters:
        - schema:
            type: string
            enum:
              - routes
              - layout
              - channels
              - assets
              - attributes
              - routes
              - products
              - customer_groups
          in: query
          name: include
          description: ''
        - schema:
            type: string
            default: '25'
          in: query
          name: per_page
        - schema:
            type: string
          in: query
          name: full_response
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: string
          in: query
          name: page
      description: Get a paginated response of collections.
    post:
      summary: Create Collection
      operationId: post-collections
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
      tags:
        - Collections
      description: Create a new collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: object
                  properties:
                    en:
                      type: string
                url:
                  type: string
            examples:
              new-example:
                value:
                  name:
                    en: New Collection
                  url: new-collection
        description: Creates a new collection.
  '/collections/{collectionId}':
    parameters:
      - schema:
          type: string
        name: collectionId
        in: path
        required: true
    get:
      summary: Single Collection
      tags:
        - Collections
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-collections-collectionId
      description: Get a single Collection by its ID
      parameters:
        - schema:
            type: string
          in: query
          name: include
    put:
      summary: Update Collection
      tags:
        - Collections
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
        '404':
          description: Not Found
      operationId: put-collections-collectionId
      description: Update a Collection by its ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: object
                  properties:
                    en:
                      type: string
    delete:
      summary: Delete Collection
      tags:
        - Collections
      responses:
        '204':
          description: No Content
      operationId: delete-collections-collectionId
      description: Delete a Collection by its ID
  '/orders/email-preview/{status}':
    parameters:
      - schema:
          type: string
        name: status
        in: path
        required: true
    get:
      summary: Get order status preview email
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailPreviewResponse'
        '422':
          description: |-
            Unprocessable Entity

            This will happen if the passed order id cannot be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: array
                    items:
                      type: string
      operationId: get-orders-email-preview-status
      description: |-
        This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.

        Mailers for each order status should be stored in the getcandy config under `orders.mailers`
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: An order id to use for the template
          required: true
  /discounts:
    get:
      summary: Get Discounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCollection'
      operationId: get-discounts
      description: Returns a paginated list of Discounts
      tags:
        - Discounts
    post:
      summary: Create Discount
      tags:
        - Discounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'
      operationId: post-discounts
      description: Create a new Discount.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_at:
                  type: string
                  format: date-time
                  example: '2017-07-21T17:32:28Z'
                end_at:
                  type: string
                  format: date-time
                  example: '2017-07-21T17:32:28Z'
                name:
                  type: object
                  properties:
                    en:
                      type: string
                      example: Buy one get one free
                uses:
                  type: integer
                status:
                  type: boolean
                channels:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      published_at:
                        type: string
                        format: date-time
                        example: '2017-07-21T17:32:28Z'
                    required:
                      - id
              required:
                - name
            examples:
              create-example:
                value:
                  name:
                    en: Buy one get one free
                  start_at: '2019-06-04 14:27:02'
                  end_at: '2019-06-04 14:27:02'
                  channels:
                    - id: 1xl0e6n4
                      published_at: '2019-06-04 14:27:02'
        description: Create a base Discount for editing.
  '/discounts/{discountId}':
    parameters:
      - schema:
          type: string
        name: discountId
        in: path
        required: true
    get:
      summary: Get a Discount
      tags:
        - Discounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'
      operationId: get-discounts-discountId
      description: "Returns a Discount by it's ID."
      parameters:
        - schema:
            type: string
          in: query
          name: include
    put:
      summary: Update Discount
      tags:
        - Discounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'
      operationId: put-discounts-discountId
      description: Updates a Discount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_at:
                  type: string
                  format: date-time
                end_at:
                  type: string
                priority:
                  type: integer
                stop_rules:
                  type: boolean
                status:
                  type: boolean
                channels:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        id:
                          type: string
                        published_at:
                          type: string
                rewards:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        products:
                          type: array
                          items:
                            type: object
                            properties:
                              product_id:
                                type: string
                              quantity:
                                type: integer
                sets:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          scope:
                            type: string
                          outcome:
                            type: boolean
                          items:
                            type: object
                            properties:
                              data:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    eligibles:
                                      type: array
                                      items:
                                        type: string
                                    type:
                                      type: string
              required:
                - start_at
    delete:
      summary: Delete Discount
      tags:
        - Discounts
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: delete-discounts-discountId
      description: Deletes a Discount
  /layouts:
    get:
      summary: Get Layouts
      tags:
        - Layouts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayoutCollection'
      operationId: get-layouts
      description: Get a paginated list of Layouts
  /orders/bulk:
    post:
      summary: Bulk update orders
      tags:
        - Orders
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                bad-request-example:
                  value:
                    http_code: 400
                    message: Unable to update field
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: string
                  field:
                    type: array
                    items:
                      type: string
                  value:
                    type: array
                    items:
                      type: string
      operationId: post-orders-bulk
      description: |-
        Allows you to bulk update a field across multiple Orders.

        You must have the correct priviledges to perform this action.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orders:
                  type: array
                  items:
                    type: string
                field:
                  type: string
                value:
                  type: string
                send_emails:
                  type: boolean
                  description: Whether to send any mailers when changing status
              required:
                - orders
                - field
            examples:
              bulk-update-example-body:
                value:
                  orders:
                    - 1236ygsd3
                    - 9etfxvj2q
                    - 75672fsfs
                  field: status
                  value: in-progress
                  send_emails: true
    get:
      summary: Get Order export
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderExportResponse'
              examples:
                export-example:
                  value:
                    data:
                      format: csv
                      content: ZW1haWwsZG...
      operationId: get-orders-bulk
      description: Export orders into a base64 encoded string
      parameters:
        - schema:
            type: string
            enum:
              - '1sfe534r4ref:934redfk'
          in: query
          name: orders
          description: Colon seperated order IDs
          required: true
        - schema:
            type: string
          in: query
          description: 'The export format, must be present in config'
          name: format
          required: true
  '/orders/{orderId}/expire':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    post:
      summary: Expire an Order
      operationId: post-orders-orderId-expire
      description: 'Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Orders
  '/orders/{orderId}/shipping/address':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    put:
      summary: Update shipping address
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: put-orders-id-shipping-address
      description: Update an orders shipping address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        description: All fields are required when an `address_id` is not present.
  '/orders/{orderId}/shipping/methods':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get Order Shipping Methods
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingPriceCollection'
              examples:
                full-example:
                  value:
                    data:
                      - id: awd2qwda0d
                        rate: 795
                        tax: 159
                        fixed: true
                        min_basket: 0
                        min_basket_tax: 0
                        min_weight: '0.00000'
                        weight_unit: kg
                        min_height: '0.00000'
                        height_unit: cm
                        min_width: '0.00000'
                        width_unit: cm
                        min_depth: '0.00000'
                        depth_unit: cm
                        min_volume: '0.00000'
                        volume_unit: l
                        method:
                          data:
                            id: v8l4pl01
                            type: regional
                            name: Standard Delivery
                            description: Method Description
                            code: ND
                        zone:
                          data:
                            id: p09prlrn
                            name: Region One
                      - id: 92owerfd3
                        rate: 3000
                        tax: 600
                        fixed: true
                        min_basket: 0
                        min_basket_tax: 0
                        min_weight: '0.00000'
                        weight_unit: kg
                        min_height: '0.00000'
                        height_unit: cm
                        min_width: '0.00000'
                        width_unit: cm
                        min_depth: '0.00000'
                        depth_unit: cm
                        min_volume: '0.00000'
                        volume_unit: l
                        method:
                          data:
                            id: awd2e15gtfd
                            type: regional
                            name: Next Working Day
                            description: Next day delivery - excluding weekends
                            code: ND1030
                        zone:
                          data:
                            id: 0o3wesde3
                            name: Region One
                      - id: eqdas9932
                        rate: 2000
                        tax: 400
                        fixed: true
                        min_basket: 0
                        min_basket_tax: 0
                        min_weight: '0.00000'
                        weight_unit: kg
                        min_height: '0.00000'
                        height_unit: cm
                        min_width: '0.00000'
                        width_unit: cm
                        min_depth: '0.00000'
                        depth_unit: cm
                        min_volume: '0.00000'
                        volume_unit: l
                        method:
                          data:
                            id: wz6d39dj
                            type: regional
                            name: Next Working Day - Before 1pm
                            description: Next working day before 1pm
                            code: ND1230
                        zone:
                          data:
                            id: 12qewdfs4
                            name: Region One
      operationId: get-orders-id-shipping-methods
      description: "This will return a list of all ShippingMethod's that are available for this order."
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: The available resources to include
  '/orders/{orderId}/shipping/cost':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    put:
      summary: Add shipping cost
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_id:
                    type: array
                    items:
                      type: string
              examples:
                unprocessable-example:
                  value:
                    price_id:
                      - Please choose a shipping option
      operationId: put-orders-id-shipping-cost
      description: Adds a shipping cost to an Order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                price_id:
                  type: string
        description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: include
          description: Related resources to include in response
  '/orders/{orderId}/contact':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    put:
      summary: Add contact details
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
      operationId: put-orders-id-contact
      description: Add contact details to an order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                phone:
                  type: string
        description: ''
  '/orders/{orderId}/billing/address':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    put:
      summary: Update billing address
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: put-orders-orderId-billing-address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        description: All fields are required when an `address_id` is not present.
      description: Update an orders billing address
  '/orders/{orderId}/lines':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    put:
      summary: Add order line
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  quantity:
                    type: array
                    items:
                      type: string
                  line_total:
                    type: array
                    items:
                      type: string
                  unit_price:
                    type: array
                    items:
                      type: string
                  tax_rate:
                    type: array
                    items:
                      type: string
                  description:
                    type: array
                    items:
                      type: string
      operationId: put-orders-id-lines
      description: Adds an order line to an order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                line_total:
                  type: integer
                unit_price:
                  type: integer
                tax_rate:
                  type: number
                  description: The tax rate as a percentage
                  format: double
                  example: 20
                description:
                  type: string
                  description: Shows publicly on the order line
                is_manual:
                  type: boolean
                  description: Should this line be treated as a manual one
                is_shipping:
                  type: boolean
                  default: false
                option:
                  type: string
                  description: 'If this is a variant, list the option name here'
                sku:
                  type: string
                discount_total:
                  type: integer
              required:
                - quantity
                - line_total
                - unit_price
                - tax_rate
                - description
                - sku
  '/orders/lines/{orderLineId}':
    parameters:
      - schema:
          type: string
        name: orderLineId
        in: path
        required: true
    delete:
      summary: Delete an order line
      tags:
        - Orders
      responses:
        '204':
          description: No Content
      operationId: delete-orders-lines-orderId
      description: Deletes an order line from an order
  '/orders/{orderId}/invoice':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get order invoice
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '401':
          description: Unauthorized
      operationId: get-orders-id-invoice
      description: Get an orders invoice
  /payments/3d-secure:
    post:
      summary: Threed Secure Payment
      tags:
        - Payments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-payments-3d-secure
      description: 'Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paRes:
                  type: string
                transaction:
                  type: string
                order_id:
                  type: string
              required:
                - paRes
                - transaction
                - order_id
  /payments/provider:
    get:
      summary: Get Payment Provider
      tags:
        - Payments
      operationId: get-payments-provider
      description: 'Gets the default, configured payment provider.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentProviderResponse'
  /products/recommended:
    get:
      summary: Get recommended products
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRecommendationCollection'
      operationId: get-products-recommended
      parameters:
        - schema:
            type: string
          in: query
          name: basket_id
          required: true
      description: |-
        This endpoint will return recommended products based on a basket.

        Using product associations, the API will find products in the basket and display any relations that have been defined.
  '/products/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    get:
      summary: Get Product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              examples: {}
      operationId: get-products-productId
      parameters:
        - schema:
            type: string
          in: query
          name: include
        - schema:
            type: string
          in: query
          name: excl_tax
          description: "Prices shouldn't include tax"
        - schema:
            type: string
          in: query
          name: full_response
          description: Returns full `attribute_data` in response
        - schema:
            type: string
          in: query
          name: option_data
          description: Include option data
        - schema:
            type: string
          in: query
          name: draft
          description: Show draft if exists
      description: "Returns a product by it's given ID"
    put:
      summary: Update Product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: put-products-productId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateBody'
        description: ''
      description: "Updates a product by it's ID"
    delete:
      summary: Delete Product
      tags:
        - Products
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: delete-products-productId
      description: |-
        Deletes a product by it's ID

        > This will only soft delete the product. It will then be available to restore at a later time.
  /products/variants:
    get:
      summary: Get Product Variants
      tags:
        - Product Variants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantCollection'
      operationId: get-products-variants
      parameters:
        - schema:
            type: string
          in: query
          name: include
      description: Get a paginated list of all product variants in the system
  '/products/variants/{productVariantId}':
    parameters:
      - schema:
          type: string
        name: productVariantId
        in: path
        required: true
    get:
      summary: Get Product Variant
      tags:
        - Product Variants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantResponse'
        '404':
          description: Not Found
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-products-variants-productVariantId
      description: "Get a product variant by it's ID"
  '/products/variants/{productVariantId}/inventory':
    parameters:
      - schema:
          type: string
        name: productVariantId
        in: path
        required: true
    put:
      summary: Update ProductVariant Inventory
      tags:
        - Product Variants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: put-products-variants-productVariantId-inventory
      description: Request to update a product variants inventory.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                inventory:
                  type: integer
  '/products/{productId}/duplicate':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Duplicate Product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-products-productId-duplicate
      description: |-
        Duplicates a product, requires you to specify new slugs and SKU's.

        > Duplicated product will not immediately be active.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                routes:
                  type: array
                  items:
                    type: object
                    properties:
                      old:
                        type: string
                      new:
                        type: string
                skus:
                  type: array
                  items:
                    type: object
                    properties:
                      old:
                        type: string
                      new:
                        type: string
              required:
                - routes
                - skus
        description: 'We use old, new values on routes and skus for matching.'
  '/products/{productId}/urls':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Create Product route
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      operationId: post-product-urls
      description: Creates and syncs a new product route.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
  '/products/{productId}/redirects':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Create Product redirect
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      operationId: post-product-redirects
      description: Creates and syncs a new product route.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
  '/products/{productId}/attributes':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Update Product attributes
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  attributes:
                    type: array
                    items:
                      type: string
      operationId: post-products-product-attributes
      description: Allows you to sync up the attributes which are directly associated to this product.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attributes:
                  type: array
                  description: An array of attribute IDs
                  items:
                    type: string
              required:
                - attributes
  '/products/{productId}/collections':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Update Product collections
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      type: string
      operationId: post-products-productId-collections
      description: Update a products collections.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                collections:
                  type: array
                  description: An array of collection IDs to associate
                  items:
                    type: string
              required:
                - collections
        description: ''
  '/products/{productId}/categories':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Update Product categories
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-products-product-categories
      description: Sync product categories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  type: array
                  description: "Array of category ID's"
                  items:
                    type: string
              required:
                - categories
  '/products/{productId}/channels':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Update Product channels
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-products-product-channels
      description: Sync product Channels
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                channels:
                  type: array
                  description: "Array of channel ID's"
                  items:
                    type: string
              required:
                - channels
  '/products/{productId}/categories/{categoryId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    delete:
      summary: Detach category
      tags:
        - Products
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: delete-products-product-categories-category
      description: Detaches a category from a product. Does not delete the category.
  '/products/{productId}/collections/{collectionId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
      - schema:
          type: string
        name: collectionId
        in: path
        required: true
    delete:
      summary: Detach collection
      tags:
        - Products
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: delete-products-product-collections-detach
      description: Detaches a collection from a product. Does not delete the collection.
  '/products/{productId}/associations':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Update product associations
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      operationId: post-products-product-associations
      description: Updates product associations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                relations:
                  type: object
                  properties:
                    association_id:
                      type: string
                    type:
                      type: string
        description: ''
    delete:
      summary: ''
      operationId: delete-products-productId-associations
      responses:
        '204':
          description: No Content
      description: Removes product associations
      tags:
        - Products
  '/products/{productId}/customer-groups':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Update customer groups
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      operationId: post-products-product-customer-groups
      description: Update a products customer groups
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    type: object
                    properties:
                      visible:
                        type: boolean
                      purchasable:
                        type: boolean
                    required:
                      - visible
                      - purchasable
              required:
                - groups
    delete:
      summary: Detach customer groups
      operationId: delete-products-product-customer-groups
      responses:
        '204':
          description: No Content
      tags:
        - Products
      description: Detaches customer groups from a product
  '/products/{productId}/drafts':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Create Draft
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-products-id-drafts
      description: Create a draft product from an existing product.
    get:
      summary: Create draft
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-products-productId-drafts
      description: |-
        Create a draft for a product.

        If a draft already exists, that current draft will be returned.
  '/products/{productId}/publish':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Publish Draft
      tags:
        - Products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
          description: ''
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-products-id-publish
      description: Publish a draft from a Product
  /reports/sales:
    get:
      summary: Get sales report
      tags:
        - Reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  labels:
                    type: array
                    items:
                      type: string
                  datasets:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                        backgroundColor:
                          type: string
                        yAxisId:
                          type: string
                        borderColor:
                          type: string
                        data:
                          type: array
                          items:
                            type: string
                        fill:
                          type: boolean
              examples:
                monthly-example:
                  value:
                    labels:
                      - January 2019
                      - February 2019
                      - March 2019
                      - April 2019
                      - May 2019
                      - June 2019
                      - July 2019
                      - August 2019
                      - September 2019
                      - October 2019
                      - November 2019
                      - December 2019
                    datasets:
                      - label: Orders
                        backgroundColor: '#E7028C'
                        yAxisID: A
                        borderColor: '#E7028C'
                        data:
                          - 4803
                          - 4703
                          - 5147
                          - 4805
                          - 4964
                          - 4907
                          - 5525
                          - 4734
                          - 5210
                          - 5733
                          - 4867
                          - 3258
                        fill: false
                      - label: Revenue
                        backgroundColor: '#0099e5'
                        yAxisID: B
                        borderColor: '#0099e5'
                        data:
                          - '44492929'
                          - '42988674'
                          - '46779741'
                          - '43873165'
                          - '45938827'
                          - '47167482'
                          - '52133245'
                          - '43647302'
                          - '48852965'
                          - '54670528'
                          - '46422960'
                          - '31355558'
                        fill: false
                weekly-example:
                  value:
                    labels:
                      - Week Comm. 02/01/2020
                      - Week Comm. 06/01/2020
                      - Week Comm. 16/01/2020
                      - Week Comm. 20/01/2020
                      - Week Comm. 29/01/2020
                    datasets:
                      - label: Orders
                        backgroundColor: '#E7028C'
                        yAxisID: A
                        borderColor: '#E7028C'
                        data:
                          - 347
                          - 1297
                          - 1335
                          - 1314
                          - 1231
                        fill: false
                      - label: Revenue
                        backgroundColor: '#0099e5'
                        yAxisID: B
                        borderColor: '#0099e5'
                        data:
                          - '2980381'
                          - '13029474'
                          - '12304326'
                          - '12530776'
                          - '10988167'
                        fill: false
                daily-example:
                  value:
                    labels:
                      - 1st January 2020
                      - 2nd January 2020
                      - 3rd January 2020
                      - 4th January 2020
                      - 5th January 2020
                      - 6th January 2020
                      - 7th January 2020
                    datasets:
                      - label: Orders
                        backgroundColor: '#E7028C'
                        yAxisID: A
                        borderColor: '#E7028C'
                        data:
                          - 20
                          - 157
                          - 121
                          - 22
                          - 27
                          - 247
                          - 255
                        fill: false
                      - label: Revenue
                        backgroundColor: '#0099e5'
                        yAxisID: B
                        borderColor: '#0099e5'
                        data:
                          - '102132'
                          - '1370854'
                          - '1096602'
                          - '161444'
                          - '249349'
                          - '2925187'
                          - '2263469'
                        fill: false
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        from:
                          type: array
                          items:
                            type: string
                        to:
                          type: array
                          items:
                            type: string
              examples:
                unprocessable-example:
                  value:
                    message: The given data was invalid.
                    errors:
                      from:
                        - The from field is required.
                        - The from is not a valid date.
                      to:
                        - The to field is required.
                        - The to is not a valid date.
      operationId: get-reports-sales
      parameters:
        - schema:
            type: string
          in: query
          name: from
          description: The from date
          required: true
        - schema:
            type: string
          in: query
          name: to
          description: The to date
        - schema:
            type: string
            enum:
              - weekly
              - monthly
              - daily
          in: query
          name: mode
          description: The dataset mode
      description: |-
        This endpoints returns sales report figures.

        > Currently this provides data suitable for chartjs.org but this is subject to change and be more decoupled in a future release.
  /reports/orders:
    get:
      summary: Get sales report
      tags:
        - Reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    month:
                      type: string
                    sub_total:
                      type: string
                    delivery_total:
                      type: string
                    tax_total:
                      type: string
                    order_total:
                      type: string
                    discount_total:
                      type: string
              examples:
                dataset-example:
                  value:
                    - month: March 2020
                      sub_total: '2163897'
                      delivery_total: '145489'
                      tax_total: '460781'
                      order_total: '2770167'
                      discount_total: '0'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        from:
                          type: array
                          items:
                            type: string
                        to:
                          type: array
                          items:
                            type: string
              examples:
                invalid-missing-data-example:
                  value:
                    message: The given data was invalid.
                    errors:
                      from:
                        - The from field is required.
                        - The from is not a valid date.
                      to:
                        - The to field is required.
                        - The to is not a valid date.
      operationId: get-reports-orders
      description: Returns a report for orders between a given date range
      parameters:
        - schema:
            type: string
          in: query
          name: from
          description: The from date
        - schema:
            type: string
          in: query
          name: to
          description: The to date
  /reports/orders/customers:
    get:
      summary: Get Customer Report
      tags:
        - Reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  '202003':
                    type: object
                    properties:
                      label:
                        type: string
                      new:
                        type: integer
                      returning:
                        type: integer
                      total:
                        type: integer
              examples:
                basic-example:
                  value:
                    '202003':
                      label: March 2020
                      new: 204
                      returning: 1980
                      total: 2184
      operationId: get-reports-orders-customers
      description: Returns a monthly grouped list of new/returning and total customers.
      parameters:
        - schema:
            type: string
          in: query
          name: from
          description: The from date
        - schema:
            type: string
          in: query
          name: to
          description: The to date
  /reports/orders/averages:
    get:
      summary: Get order averages
      tags:
        - Reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                    sub_total:
                      type: string
                    delivery_total:
                      type: string
                    tax_total:
                      type: string
                    order_total:
                      type: string
                    discount_total:
                      type: string
              examples:
                monthly-example:
                  value:
                    - date: March 2020
                      sub_total: '8303'
                      delivery_total: '519'
                      tax_total: '1762'
                      order_total: '10584'
                      discount_total: '6'
                weekly-example:
                  value:
                    - date: Week Comm. 02/03/2020
                      sub_total: '7904'
                      delivery_total: '535'
                      tax_total: '1686'
                      order_total: '10125'
                      discount_total: '0'
      operationId: get-reports-orders-averages
      parameters:
        - schema:
            type: string
          in: query
          name: from
          description: The from date
        - schema:
            type: string
          in: query
          name: to
          description: The to date
        - schema:
            type: string
            enum:
              - weekly
              - daily
              - yearly
              - monthly
          in: query
          name: mode
          description: ''
      description: Returns an array of order averages between a given date range.
  /reports/products/best-sellers:
    get:
      summary: Get best selling products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  date:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            product_count:
                              type: integer
                            description:
                              type: string
                            sku:
                              type: string
                            month:
                              type: string
              examples:
                result-example:
                  value:
                    '2020-02-01T10:53:53.000000Z':
                      products:
                        - product_count: 149
                          description: Bertie botts every flavor beans
                          sku: bbefb
                          month: '2020-02-01'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        from:
                          type: array
                          items:
                            type: string
                        to:
                          type: array
                          items:
                            type: string
              examples:
                unprocessable-example:
                  value:
                    message: The given data was invalid.
                    errors:
                      from:
                        - The from field is required.
                      to:
                        - The to field is required.
      operationId: get-products-best-sellers
      description: Gets best selling products grouped by month.
      tags:
        - Reports
      parameters:
        - schema:
            type: string
          in: query
          name: from
          description: The from date
        - schema:
            type: string
          in: query
          name: to
          description: The to date
    parameters: []
  '/reports/metrics/{subject}':
    parameters:
      - schema:
          type: string
          enum:
            - sales
            - orders
        name: subject
        in: path
        required: true
    get:
      summary: Get metric data
      tags:
        - Reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_month:
                    type: string
                  previous_month:
                    type: string
                  today:
                    type: string
                  yesterday:
                    type: string
                  current_week:
                    type: string
                  previous_week:
                    type: string
              examples:
                orders-example:
                  value:
                    current_month: 0
                    previous_month: 1077
                    today: 0
                    yesterday: 0
                    current_week: 0
                    previous_week: 0
                sales-example:
                  value:
                    current_month: 0
                    previous_month: '8626214'
                    today: 0
                    yesterday: 0
                    current_week: 0
                    previous_week: 0
      operationId: get-reports-metrics-subject
      description: Returns metric (KPI) data for either sales or orders.
  /products:
    get:
      summary: Get Products
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCollection'
      operationId: get-products
      description: Gets a paginated list of products.
      parameters:
        - schema:
            type: string
          in: query
          name: include
        - schema:
            type: boolean
            default: true
          in: query
          name: paginated
          description: ''
          allowEmptyValue: true
        - schema:
            type: string
          in: query
          name: ids
          description: Return only the selected IDs
        - schema:
            type: integer
          in: query
          name: limit
    post:
      summary: Create Product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  url:
                    type: array
                    items:
                      type: string
                  stock:
                    type: array
                    items:
                      type: string
                  family_id:
                    type: array
                    items:
                      type: string
                  price:
                    type: array
                    items:
                      type: string
                  sku:
                    type: array
                    items:
                      type: string
              examples:
                unprocessable-example:
                  value:
                    name:
                      - The name field is required
                    url:
                      - The url field is required.
                    stock:
                      - The stock field is required.
                    family_id:
                      - The family id field is required.
                    price:
                      - The price field is required.
                    sku:
                      - The sku field is required.
                      - The sku field must be unique
      operationId: post-products
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: object
                  required:
                    - en
                  properties:
                    en:
                      type: string
                url:
                  type: string
                stock:
                  type: integer
                family_id:
                  type: string
                price:
                  type: number
                  format: float
                sku:
                  type: string
              required:
                - name
                - url
                - stock
                - family_id
                - price
                - sku
            examples:
              create-body-example:
                value:
                  name:
                    en: New Product
                  url: new-product
                  family_id: 123fw4rfs
                  price: 12.99
                  sku: newp12345
      description: Creates a new product in the system. When creating a new product will also create 1 variant for that product.
      parameters:
        - schema:
            type: string
          in: query
          name: include
  /saved-searches/product:
    get:
      summary: Get saved searches
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedSearchCollection'
      operationId: get-saved-searches
      description: Returns a list of current saved searches for products
    parameters: []
  '/saved-searches/{savedSearchId}':
    parameters:
      - schema:
          type: string
        name: savedSearchId
        in: path
        required: true
    delete:
      summary: Delete saved search
      operationId: delete-saved-searches-savedSearchId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Delete a saved search entry by ID.
      tags:
        - Search
  /settings:
    get:
      summary: Get settings
      tags:
        - Settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingCollection'
      operationId: get-settings
      description: Retrieves settings that have been defined in the database.
  '/settings/{handle}':
    parameters:
      - schema:
          type: string
        name: handle
        in: path
        required: true
    get:
      summary: Get setting
      tags:
        - Settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-settings-handle
      description: Get specific settings.
  /shipping/zones:
    get:
      summary: Get Shipping Zones
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingZoneCollection'
      operationId: get-shipping-zones
      description: Returns a paginated list of shipping zones.
      parameters:
        - schema:
            type: string
          in: query
          name: include
    post:
      summary: Create Shipping Zone
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingZoneResponse'
        '404':
          description: Not Found
      operationId: post-shipping-zones
      description: Create a new shipping zone
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
  '/shipping/zones/{shippingZoneId}':
    parameters:
      - schema:
          type: string
        name: shippingZoneId
        in: path
        required: true
    get:
      summary: Get Shipping Zone
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingZoneResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-shipping-zones-shippingZoneId
      description: "Get a shipping zone by it's ID."
  '/shipping/{shippingMethodId}/prices':
    parameters:
      - schema:
          type: string
        name: shippingMethodId
        in: path
        required: true
    post:
      summary: Add shipping price
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingPriceResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  rate:
                    type: array
                    items:
                      type: string
                  zone_id:
                    type: array
                    items:
                      type: string
                  currency_id:
                    type: array
                    items:
                      type: string
              examples:
                unprocessable-example:
                  value:
                    rate:
                      - The rate field is required.
                    zone_id:
                      - The zone id field is required.
                    currency_id:
                      - The currency id field is required.
      operationId: post-shipping-id-prices
      description: Add a price to a shipping method.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rate:
                  type: number
                zone_id:
                  type: string
                currency_id:
                  type: string
              required:
                - rate
                - zone_id
                - currency_id
        description: ''
  '/shipping/prices/{shippingPriceId}':
    parameters:
      - schema:
          type: string
        name: shippingPriceId
        in: path
        required: true
    put:
      summary: Update shipping price
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingPriceResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  rate:
                    type: array
                    items:
                      type: string
                  zone_id:
                    type: array
                    items:
                      type: string
                  currency_id:
                    type: array
                    items:
                      type: string
      operationId: put-shipping-prices-shippingPriceId
      description: Update a shipping price
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rate:
                  type: integer
                zone_id:
                  type: string
                currency_id:
                  type: string
              required:
                - rate
                - zone_id
                - currency_id
  '/shipping/{shippingMethodId}/zones':
    parameters:
      - schema:
          type: string
        name: shippingMethodId
        in: path
        required: true
    put:
      summary: Update shipping method zones
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodResponse'
      operationId: put-shipping-shippingMethodId-zones
      description: "Update a shipping method's zones."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                zones:
                  type: array
                  items:
                    type: string
              required:
                - zones
            examples:
              update-body-example:
                value:
                  zones:
                    - 1rdf4sdfs
                    - 567yhg2s3
  '/shipping/{id}/users':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Update shipping method users
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: string
      operationId: put-shipping-id-users
      description: Update shipping method users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    type: string
  /shipping:
    get:
      summary: Get shipping methods
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodCollection'
      operationId: get-shipping
      description: Returns a paginated list of shipping methods
      parameters:
        - schema:
            type: integer
          in: query
          name: per_page
        - schema:
            type: string
          in: query
          name: include
    post:
      summary: Create shipping method
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShippingMethod'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  type:
                    type: array
                    items:
                      type: string
      operationId: post-shipping
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - standard
                    - dhl
                    - regional
                name:
                  type: object
                  properties:
                    en:
                      type: string
              required:
                - type
      description: Create a new shipping method.
      parameters: []
  '/shipping/{shippingMethodId}':
    parameters:
      - schema:
          type: string
        name: shippingMethodId
        in: path
        required: true
    get:
      summary: Get shipping methods
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-shipping-shippingMethodId
      description: "Returns a shipping method by it's ID."
      parameters:
        - schema:
            type: string
          in: query
          name: include
    put:
      summary: Update shipping method
      tags:
        - Shipping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  type:
                    type: array
                    items:
                      type: string
      operationId: put-shipping-shippingMethodId
      description: "Update shipping method by it's ID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: object
                  required:
                    - en
                  properties:
                    en:
                      type: string
                type:
                  type: string
              required:
                - name
                - type
    delete:
      summary: Delete shipping method
      tags:
        - Shipping
      responses:
        '204':
          description: No Content
      operationId: delete-shipping-shippingMethodId
      description: Deletes a shipping method.
  /tags:
    get:
      summary: Get all tags
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCollection'
      operationId: get-tags
      description: Get paginated list of tags
    post:
      summary: ''
      operationId: post-tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      description: Create a new tag
      tags:
        - Tags
  /search:
    get:
      summary: Search GetCandy
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
      operationId: get-search
      description: |-
        Search across products or categories

        You can filter across attributes by adding key=value to the search query, for filtering multiple values use key=value1:value2
      parameters:
        - schema:
            type: string
          in: query
          name: channel
        - schema:
            type: string
          in: query
          name: category
        - schema:
            type: integer
          in: query
          name: page
        - schema:
            type: string
            enum:
              - category
              - product
            default: product
          in: query
          name: search_type
        - schema:
            type: string
          in: query
          name: keywords
        - schema:
            type: boolean
          in: query
          name: rank
          description: Whether to rank results based on config
        - schema:
            type: boolean
            default: false
          in: query
          name: ids_only
          description: "Will only return result ID's, good for performance"
        - schema:
            type: string
          in: query
          name: include
        - schema:
            type: string
          in: query
          name: sort
        - schema:
            type: boolean
          in: query
          name: full_response
  '/tags/{tagId}':
    parameters:
      - schema:
          type: string
        name: tagId
        in: path
        required: true
    get:
      summary: Get a tag
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-tags-tagId
      description: "Gets a tag by it's ID"
    put:
      summary: Update a tag
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
      operationId: put-tags-tagId
      description: "Updates a tag by it's ID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
        description: ''
    delete:
      summary: Delete a tag
      tags:
        - Tags
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: delete-tags-tagId
      description: "Deletes a tag by it's ID"
  /taxes:
    get:
      summary: Get taxes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
      operationId: get-taxes
      description: Get a paginated list of taxes
      tags:
        - Taxes
    post:
      summary: Create tax
      tags:
        - Taxes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  percentage:
                    type: array
                    items:
                      type: string
      operationId: post-taxes
      description: Create a new tax resource.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Unique name
                percentage:
                  type: number
              required:
                - name
                - percentage
  '/taxes/{taxId}':
    parameters:
      - schema:
          type: string
        name: taxId
        in: path
        required: true
    get:
      summary: Get tax record
      tags:
        - Taxes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-taxes-taxId
      description: "Get a tax record by it's ID"
    put:
      summary: Update tax record
      tags:
        - Taxes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  percentage:
                    type: array
                    items:
                      type: string
      operationId: put-taxes-taxId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Must be unique
                percentage:
                  type: number
              required:
                - name
                - percentage
      description: "Update a tax record by it's ID"
    delete:
      summary: Delete tax record
      tags:
        - Taxes
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: delete-taxes-taxId
      description: "Delete a tax record by it's ID."
  '/users/payments/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    delete:
      summary: Delete reusable payment
      tags:
        - Payments
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
      operationId: delete-users-payments-id
      description: Removes a users reusable payment method. This can be invoked by any admin user and also the user who the record belongs to.
  /users/fields:
    get:
      summary: Get custom user fields
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFieldsResponse'
              examples:
                basic-example:
                  value:
                    data:
                      fields:
                        account_number:
                          label: Account Number
                          type: text
      operationId: get-users-fields
      description: This endpoint returns any available user fields which have been defined in the getcandy config.
  /users/current:
    get:
      summary: Get the current user
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      operationId: get-users-current
      description: Returns the user associated to the access token.
  /users:
    get:
      summary: Get users
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
      operationId: get-users
      description: Get a paginated list of users.
    post:
      summary: Create user
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthenticated'
      operationId: post-users
      description: Create a new user in the system
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
                - email
                - firstname
                - lastname
                - password
                - password_confirmation
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get user
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userId
      description: Get a user by their given ID.
    put:
      summary: ''
      operationId: put-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
                - email
      description: Updates a user record from their ID.
    delete:
      summary: ''
      operationId: delete-users-userId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
      description: Delete a user by their given ID.
  /account/password:
    post:
      summary: Reset  password
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                password-changed-example:
                  value:
                    message: Pasword changed
      operationId: post-account-password
      description: Allows the current user to update their password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPasswordResetBody'
  /recycle-bin:
    get:
      summary: Get records
      tags:
        - Recycle Bin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecycleBinCollection'
      operationId: get-recycle-bin
      description: Returns a paginated list of all recycle bin items.
  '/recycle-bin/{itemId}':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
    get:
      summary: Get item
      tags:
        - Recycle Bin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecycleBinResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-recycle-bin-itemId
      description: Retrieves a recycle bin item.
    delete:
      summary: Delete item
      tags:
        - Recycle Bin
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
      operationId: delete-recycle-bin-itemId
      description: |-
        Remove a recycle bin item

        > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
  '/versions/{modelId}/restore':
    parameters:
      - schema:
          type: string
        name: modelId
        in: path
        required: true
    post:
      summary: Restore model
      tags:
        - Versioning
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-versions-modelId-restore
      description: Restores a model version
  /:
    get:
      summary: Get root
      tags:
        - Root
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Root'
              examples:
                root-example:
                  value:
                    version: 0.9.0_beta
                    locale: en
                    channel:
                      id: 92weawd23
                      name: Webstore
                      handle: webstore
                      url: 'http://storefront.test'
                      default: true
                    currency:
                      id: q3e33wede
                      name: British Pound
                      code: GBP
                      enabled: true
                      format: '£{price}'
                      decimal_point: .
                      thousand_point: ','
                      default: true
      operationId: get
      description: Returns information about the API
  '/baskets/{basketId}/meta':
    parameters:
      - schema:
          type: string
        name: basketId
        in: path
        required: true
    post:
      summary: Add meta information
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-baskets-basketId-meta
      description: Allows you to add custom meta information to a basket.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBasketMetaBody'
  '/baskets/{basketId}/discounts':
    parameters:
      - schema:
          type: string
        name: basketId
        in: path
        required: true
    delete:
      summary: Remove discount
      tags:
        - Baskets
      responses:
        '204':
          description: No Content
      operationId: delete-baskets-basketId-discounts
      description: 'Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one. '
  '/baskets/{basketId}/user':
    parameters:
      - schema:
          type: string
        name: basketId
        in: path
        required: true
    put:
      summary: Add user
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
      operationId: put-baskets-basketId-user
      description: |-
        Attach a user to a basket.

        > This endpoint will be deprecated in version 0.3.0
    delete:
      summary: Remove user
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Basket'
      operationId: delete-baskets-basketId-user
      description: |-
        Removes a user from a basket and turns it into a guest basket

        > This endpoint will be deprecated in 0.3.0
  /baskets:
    get:
      summary: Get baskets
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketCollection'
      operationId: get-baskets
      description: Get a paginated list of baskets
    post:
      summary: Create Basket
      operationId: post-baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasketBody'
      tags:
        - Baskets
      description: ''
  /basket-lines:
    post:
      summary: Create basket lines
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
      operationId: post-basket-lines
      description: Add lines to a basket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBasketLinesBody'
            examples:
              create-lines-example:
                value:
                  basket_id: 15rf2395etf34t
                  variants:
                    - id: 534ed23ewdas
                      quantity: 1
                      meta:
                        giftwrapped: true
    delete:
      summary: Delete basket lines
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Basket'
      operationId: delete-basket-lines
      description: Removes basket lines from a basket
  '/basket-lines/{basketLineId}':
    parameters:
      - schema:
          type: string
        name: basketLineId
        in: path
        required: true
    put:
      summary: Update basket line
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
      operationId: put-basket-lines-basketLineId
      description: "Update a basket line based on it's ID."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketLineUpdateBody'
  '/basket-lines/{basketLineId}/add':
    parameters:
      - schema:
          type: string
        name: basketLineId
        in: path
        required: true
    put:
      summary: Update basket line quantity
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
      operationId: put-basket-lines-basketLineId-add
      description: Update basket line quantity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketLineUpdateBody'
  '/basket-lines/{basketLineId}/remove':
    parameters:
      - schema:
          type: string
        name: basketLineId
        in: path
        required: true
    put:
      summary: Remove basket line quantity
      tags:
        - Baskets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
      operationId: put-basket-lines-basketLineId-remove
      description: Removes quantity from a basket line
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketLineUpdateBody'
  /payments/types:
    get:
      summary: Payment types
      tags:
        - Payments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTypeCollection'
      operationId: get-payments-types
      description: Returns a list of available Payment Types in the system
components:
  schemas:
    Error:
      title: Error
      type: object
      properties:
        error:
          type: object
          properties:
            http_code:
              example: 404
              type: integer
            message:
              type: string
              example: Resource not found
    Links:
      title: Links
      type: object
      properties:
        first:
          type: string
        last:
          type: string
        prev:
          type: string
          nullable: true
        next:
          type: string
          nullable: true
    Order:
      title: Order
      type: object
      x-examples:
        full-response:
          id: 34fSEsef23ewds
          display_id: '#ORD-1234567'
          sub_total: 24150
          type: SagePay
          delivery_total: 0
          discount_total: 0
          tax_total: 4830
          shipping_preference: null
          shipping_method: Standard Delivery
          order_total: 28980
          reference: CANDY-123456789
          customer_reference: null
          invoice_reference: '#INV-CANDY-123456789'
          vat_no: null
          tracking_no: null
          dispatched_at: null
          currency: GBP
          customer_name: Sweet Tooth
          contact_details:
            phone: ''
            email: sweets@sweettooth.com
          billing_details:
            phone: ''
            email: null
            firstname: Sweet
            lastname: Tooth
            address: Sweet Shop Inc.
            address_two: Pastry Lane
            address_three: null
            city: Chelmsford
            county: Essex
            state: null
            country: United Kingdom
            zip: CM2 5TH
          shipping_details:
            method: Standard Delivery
            preference: null
            phone: 12345-678910
            email: null
            firstname: Sweet
            lastname: Tooth
            address: Sweet Shop Inc.
            address_two: Pastry Lane
            address_three: null
            city: Chelmsford
            county: Essex
            state: null
            country: United Kingdom
            zip: CM2 5TH
          status: dispatched
          created_at: '2018-02-28T15:33:26.000000Z'
          updated_at: '2019-06-04T08:22:29.000000Z'
          placed_at: '2018-02-28T15:34:57.000000Z'
          notes: "Please don't ring the doorbell and run away"
          meta: []
      properties:
        id:
          type: string
          example: 123RFesfes356P
        display_id:
          type: string
          example: '#ORD-123456'
        sub_total:
          type: integer
          format: int32
          example: 12345
        type:
          type: string
          example: SagePay
        delivery_total:
          type: integer
          format: int32
          example: 1307
        discount_total:
          type: integer
        tax_total:
          type: integer
          format: int32
          example: 1307
        shipping_preference:
          type: string
        shipping_method:
          type: string
          example: Standard Delivery
        order_total:
          type: integer
          format: int32
          example: 7845
        reference:
          type: string
          example: CUSTOM-REFERENCE
        customer_reference:
          type: string
        invoice_reference:
          type: string
          example: '#INV-1234567'
        vat_no:
          type: string
        tracking_no:
          type: string
        dispatched_at:
          type: string
        currency:
          type: string
          example: GBP
        customer_name:
          type: string
          example: Thanos
        contact_details:
          type: object
          properties:
            phone:
              type: string
              example: '12345678910'
            email:
              type: string
              example: example@example.com
        billing_details:
          $ref: '#/components/schemas/Address'
        shipping_details:
          $ref: '#/components/schemas/Address'
        status:
          type: string
          example: payment-received
        created_at:
          type: string
        updated_at:
          type: string
        notes:
          type: string
        meta:
          type: array
          items:
            type: object
        basket:
          $ref: '#/components/schemas/BasketResponse'
        discounts:
          type: string
        transactions:
          $ref: '#/components/schemas/TransactionCollection'
        lines:
          $ref: '#/components/schemas/OrderLineCollection'
        shipping:
          $ref: '#/components/schemas/OrderLineResponse'
        logs:
          $ref: '#/components/schemas/ActivityLogCollection'
        user:
          $ref: '#/components/schemas/UserResponse'
    Address:
      title: Address
      type: object
      properties:
        phone:
          type: string
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
        address_two:
          type: string
        address_three:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          $ref: './countries/responses/CountryResponse.yaml'
        postal_code:
          type: string
        salutation:
          type: string
        default:
          type: boolean
        shipping:
          type: boolean
        delivery:
          type: boolean
        delivery_instructions:
          type: string
        meta:
          anyOf:
            - type: object
            - type: array
              items: {}
        last_used_at:
          type: string
    Attribute:
      title: Attribute
      type: object
      x-examples:
        attribute-example:
          id: dnj4zky5
          name:
            en: Name
            sv: Namn
          handle: name
          position: '1'
          filterable: false
          scopeable: true
          translatable: true
          variant: false
          searchable: true
          localised: true
          type: text
          required: true
          lookups: null
          system: false
      description: |-
        ### Available includes
        - group
      properties:
        id:
          type: string
          example: dnj4zky5
        name:
          type: object
        handle:
          type: string
        position:
          type: integer
        filterable:
          type: boolean
        scopeable:
          type: boolean
        translatable:
          type: boolean
        variant:
          type: boolean
        searchable:
          type: boolean
        localised:
          type: boolean
        type:
          type: string
        required:
          type: boolean
        lookups:
          type: array
          items:
            type: object
        system:
          type: boolean
        group:
          $ref: '#/components/schemas/AttributeGroupResponse'
    Permission:
      title: Permission
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        guard_name:
          type: string
      x-tags:
        - ACL
        - Authentication
    Role:
      title: Role
      type: object
      x-tags:
        - ACL
        - Authentication
      properties:
        id:
          type: string
        name:
          type: string
        guard_name:
          type: string
        permissions:
          $ref: '#/components/schemas/PermissionCollection'
    Asset:
      title: Asset
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
        caption:
          type: string
        kind:
          type: string
        external:
          type: boolean
        position:
          type: integer
        primary:
          type: boolean
        url:
          type: string
        sub_kind:
          type: string
        extension:
          type: string
        original_filename:
          type: string
        size:
          type: string
        width:
          type: string
        height:
          type: string
        transforms:
          $ref: '#/components/schemas/AssetTransformCollection'
        tags:
          $ref: '#/components/schemas/TagCollection'
    AssetTransform:
      title: AssetTransform
      type: object
      properties:
        id:
          type: string
        handle:
          type: string
        url:
          type: string
    AssociationGroup:
      title: AssociationGroup
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        handle:
          type: string
    BasketLine:
      title: BasketLine
      type: object
      properties:
        id:
          type: string
        quantity:
          type: integer
        line_total:
          type: number
        unit_price:
          type: number
        unit_tax:
          type: number
        line_discount:
          type: number
        tax:
          type: number
        meta:
          type: object
        variant:
          $ref: '#/components/schemas/ProductVariantResponse'
    Basket:
      title: Basket
      type: object
      properties:
        id:
          type: string
        total:
          type: number
        sub_total:
          type: number
        tax_total:
          type: number
        discount_total:
          type: number
          format: float
        changed:
          type: boolean
        has_exclusions:
          type: boolean
        meta:
          type: object
        lines:
          $ref: '#/components/schemas/BasketLineCollection'
        order:
          $ref: '#/components/schemas/OrderResponse'
    SavedBasket:
      title: SavedBasket
      type: object
      x-tags:
        - Baskets
      properties:
        id:
          type: string
        name:
          type: string
        basket:
          $ref: '#/components/schemas/BasketResponse'
    Category:
      title: Category
      type: object
      x-examples:
        Standard with mapped attributes:
          id: v8l4pl01
          sort: 'min_price:asc'
          products_count: 0
          children_count: 1
          left_pos: 1
          right_pos: 938
          description: Category description
          meta_keywords: null
          name: Fasteners
          page_title: Seo page title
          short_description: Short Description
          meta_description: Page meta description
          layout: []
          primary_asset: []
        Full response:
          id: v8l4pl01
          sort: 'min_price:asc'
          products_count: 0
          children_count: 1
          left_pos: 1
          right_pos: 938
          attribute_data:
            description:
              webstore:
                en: Category description
            meta_keywords:
              webstore:
                en: null
            name:
              webstore:
                en: Category name
            page_title:
              webstore:
                en: Page title
            short_description:
              webstore:
                en: Short description
            meta_description:
              webstore:
                en: Meta description
          layout: []
          primary_asset: []
        Full response with child:
          id: v8l4pl01
          sort: 'min_price:asc'
          products_count: 0
          children_count: 1
          left_pos: 1
          right_pos: 938
          attribute_data:
            description:
              webstore:
                en: Category description
            meta_keywords:
              webstore:
                en: null
            name:
              webstore:
                en: Category name
            page_title:
              webstore:
                en: Page title
            short_description:
              webstore:
                en: Short description
            meta_description:
              webstore:
                en: Meta description
          children:
            data:
              - id: p09prlrn
                sort: 'min_price:asc'
                left_pos: 2
                right_pos: 937
                attribute_data:
                  description:
                    webstore:
                      en: ''
                  meta_keywords:
                    webstore:
                      en: ''
                  name:
                    webstore:
                      en: Child Category
                  page_title:
                    webstore:
                      en: Child category SEO title
                  short_description:
                    webstore:
                      en: ''
                  meta_description:
                    webstore:
                      en: Child Category meta description
                layout: []
                primary_asset: []
          layout: []
          primary_asset: []
      description: |-
        ### Available includes
        - children
      properties:
        id:
          type: string
        sort:
          type: string
        products_count:
          type: integer
        children_count:
          type: integer
        left_pos:
          type: integer
        right_pos:
          type: integer
        name:
          type: string
        attribute_data:
          type: object
        children:
          $ref: '#/components/schemas/CategoryCollection'
        channels:
          $ref: './channels/responses/ChannelCollection.yaml'
        ancestors:
          $ref: '#/components/schemas/CategoryCollection'
        routes:
          $ref: './routes/responses/RouteCollection.yaml'
        layout:
          $ref: '#/components/schemas/LayoutResponse'
        assets:
          $ref: '#/components/schemas/AssetCollection'
        primary_asset:
          $ref: '#/components/schemas/AssetResponse'
        attributes:
          $ref: '#/components/schemas/AttributeCollection'
        customer_groups:
          $ref: './customer-groups/responses/CustomerGroupCollection.yaml'
        products:
          $ref: '#/components/schemas/ProductCollection'
    AttributeGroup:
      title: AttributeGroup
      type: object
      x-examples:
        full-example:
          id: vokq5kmj
          name:
            en: General
          handle: general
          position: '1'
      description: |-
        ### Available includes
        - attributes
      properties:
        id:
          type: string
        name:
          type: object
        handle:
          type: string
        position:
          type: integer
          format: int32
        attributes:
          $ref: '#/components/schemas/AttributeCollection'
    Unauthenticated:
      title: Unauthenticated
      type: object
      properties:
        error:
          type: string
      x-examples:
        example:
          error: Unauthenticated.
      x-tags:
        - Statuses
    Transaction:
      title: Transaction
      type: object
      properties:
        id:
          type: string
        transaction_id:
          type: string
        merchant:
          type: string
        amount:
          type: integer
          format: int32
        card_type:
          type: string
        last_four:
          type: string
        provider:
          type: string
        driver:
          type: string
        success:
          type: boolean
        refund:
          type: boolean
        address_matched:
          type: boolean
        cvc_matched:
          type: boolean
        threed_secure:
          type: boolean
        postcode_matched:
          type: boolean
        status:
          type: string
        notes:
          type: string
        created_at:
          type: string
          format: date
      x-examples:
        normal-example:
          id: 2sef73d8ssefsf8
          transaction_id: 1234-1234-1234-1234
          merchant: mystorefront
          amount: 7845
          card_type: Visa
          last_four: '1234'
          provider: SagePay
          driver: sagepay
          success: true
          refund: false
          address_matched: true
          cvc_matched: true
          threed_secure: true
          postcode_matched: true
          status: Ok
          notes: null
          created_at: '2020-04-30T11:44:34.000000Z'
    Collection:
      title: Collection
      type: object
      description: |-
        ### Available includes

        - routes
        - layout
        - channels
        - assets
        - attributes
        - products
        - customerGroups
      properties:
        id:
          type: string
        attribute_data:
          type: object
        routes:
          $ref: './routes/responses/RouteCollection.yaml'
        layout:
          $ref: '#/components/schemas/LayoutResponse'
        channels:
          $ref: './channels/responses/ChannelCollection.yaml'
        assets:
          $ref: '#/components/schemas/AssetCollection'
        attributes:
          $ref: '#/components/schemas/AttributeCollection'
        products:
          $ref: '#/components/schemas/ProductCollection'
        customer_groups:
          $ref: './customer-groups/responses/CustomerGroupCollection.yaml'
    Discount:
      title: Discount
      type: object
      x-examples:
        discount-simple-example:
          id: 1xl0e6n4
          start_at: '2019-06-04 14:27:02'
          end_at: null
          priority: 0
          status: 1
          stop_rules: false
          uses: 0
          name: Buy one get one free
        discount-full-example:
          id: 1xl0e6n4
          start_at: '2019-06-04 14:27:02'
          end_at: null
          priority: 0
          status: 1
          stop_rules: false
          uses: 0
          attribute_data:
            name:
              webstore:
                en: Buy one get one free
      properties:
        id:
          type: string
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time
        priority:
          type: boolean
        status:
          type: boolean
        stop_rules:
          type: boolean
        uses:
          type: integer
          format: int32
      required:
        - id
      description: "###\_Available includes\n- sets\n- rewards\n- items"
    Language:
      title: Language
      type: object
      x-examples:
        language-example:
          id: 6z8m9gmj
          name: English
          lang: en
          iso: gb
          default: 1
          enabled: 1
          current: false
      properties:
        id:
          type: string
        name:
          type: string
        lang:
          type: string
        iso:
          type: string
        default:
          type: boolean
        enabled:
          type: boolean
        current:
          type: boolean
      required:
        - id
      description: ''
    Layout:
      title: Layout
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        handle:
          type: string
        type:
          type: string
      required:
        - id
        - name
        - handle
        - type
      x-examples:
        layout-example:
          id: jn63vl0d
          name: Category listing
          handle: category_listing
          type: category
      description: ''
    ShippingPrice:
      title: ShippingPrice
      type: object
      description: "###\_Available Includes\n\n- method\n- zone\n- currency\n- customer_groups"
      x-examples:
        example-with-zone-method:
          id: ujafe83dd
          rate: 795
          tax: 159
          fixed: true
          min_basket: 0
          min_basket_tax: 0
          min_weight: '0.00000'
          weight_unit: kg
          min_height: '0.00000'
          height_unit: cm
          min_width: '0.00000'
          width_unit: cm
          min_depth: '0.00000'
          depth_unit: cm
          min_volume: '0.00000'
          volume_unit: l
          method:
            data:
              id: v5ters33
              type: regional
              name: Standard Delivery
              description: Standard delivery
              code: ND
          zone:
            data:
              id: awd012es
              name: Region 1
      properties:
        id:
          type: string
        rate:
          type: integer
          format: int32
        tax:
          type: integer
          format: int32
        fixed:
          type: boolean
        min_basket:
          type: integer
          description: Minimum basket total to be eligible
        min_basket_tax:
          type: integer
        min_weight:
          type: string
        weight_unit:
          type: string
        min_height:
          type: string
        height_unit:
          type: string
        min_width:
          type: string
        width_unit:
          type: string
        min_depth:
          type: string
        depth_unit:
          type: string
        min_volume:
          type: string
        volume_unit:
          type: string
        method:
          $ref: '#/components/schemas/ShippingMethodResponse'
        zone:
          $ref: '#/components/schemas/ShippingZoneResponse'
    PaymentProvider:
      title: PaymentProvider
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        client_token:
          type: string
          description: |
            If supported
        exires_at:
          type: string
          description: If supported
      x-examples:
        provider-example:
          name: SagePay
          client_token: 123456-1234-1234-1234-123456789
          exires_at: '2020-04-03T13:24:23.211000Z'
    Product:
      title: Product
      allOf:
        - type: object
          properties:
            id:
              type: string
            drafted_at:
              type: string
              format: date-time
              description: 'If this product is a draft, this will be populated'
            option_data:
              description: Displays any variant option data
              type: object
            created_at:
              type: string
            updated_at:
              type: string
            family:
              $ref: './product-families/responses/ProductFamilyResponse.yaml'
            draft:
              $ref: '#/components/schemas/ProductResponse'
            published_parent:
              $ref: '#/components/schemas/ProductResponse'
            assets:
              $ref: '#/components/schemas/AssetCollection'
            routes:
              $ref: './routes/responses/RouteCollection.yaml'
            channels:
              $ref: './channels/responses/ChannelCollection.yaml'
            first_variant:
              $ref: '#/components/schemas/ProductVariantResponse'
            primary_asset:
              $ref: '#/components/schemas/AssetResponse'
            categories:
              $ref: '#/components/schemas/CategoryCollection'
            variants:
              $ref: '#/components/schemas/ProductVariantCollection'
            discounts:
              $ref: '#/components/schemas/DiscountCollection'
            collections:
              $ref: '#/components/schemas/CollectionCollection'
            associations:
              $ref: '#/components/schemas/ProductAssociationCollection'
            versions:
              $ref: '#/components/schemas/VersionCollection'
            customer_groups:
              $ref: './customer-groups/responses/CustomerGroupCollection.yaml'
            attributes:
              $ref: '#/components/schemas/AttributeCollection'
            layout:
              $ref: '#/components/schemas/LayoutResponse'
        - $ref: '#/components/schemas/LocalisedAttributeData'
        - $ref: '#/components/schemas/AttributeData'
      description: ''
    ProductRecommendation:
      title: ProductRecommendation
      type: object
      properties:
        id:
          type: string
        product:
          $ref: '#/components/schemas/ProductResponse'
    AttributeData:
      title: AttributeData
      type: object
      properties:
        attribute_data:
          type: object
    LocalisedAttributeData:
      title: LocalisedAttributeData
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ProductVariant:
      title: ProductVariant
      type: object
      description: |-
        ### Available includes

        - products
        - basketLines
        - image
        - tax
        - customerPricing
        - tiers
      properties:
        id:
          type: string
        sku:
          type: string
        backorder:
          type: string
        requires_shipping:
          type: boolean
        price:
          type: number
        factor_tax:
          type: number
        unit_price:
          type: number
        total_tax:
          type: number
        unit_tax:
          type: number
        unit_qty:
          type: integer
        min_qty:
          type: integer
        max_qty:
          type: integer
        min_batch:
          type: integer
        inventory:
          type: integer
        incoming:
          type: integer
        group_pricing:
          type: boolean
        weight:
          type: object
          properties:
            value:
              type: string
            unit:
              type: string
        height:
          type: object
          properties:
            value:
              type: string
            unit:
              type: string
        width:
          type: object
          properties:
            value:
              type: string
            unit:
              type: string
        depth:
          type: object
          properties:
            value:
              type: string
            unit:
              type: string
        volume:
          type: object
          properties:
            value:
              type: string
            unit:
              type: string
        product:
          $ref: '#/components/schemas/ProductResponse'
        image:
          $ref: '#/components/schemas/AssetResponse'
        customer_pricing:
          $ref: '#/components/schemas/CustomerPriceCollection'
        tax:
          $ref: '#/components/schemas/TaxResponse'
        tiers:
          $ref: '#/components/schemas/ProductTierPriceCollection'
        options:
          type: object
    SavedSearch:
      title: SavedSearch
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        payload:
          type: object
      x-examples:
        saved-search-example:
          id: wz6d39dj
          name: Red Sweets
          payload:
            keywords: Red sweets
    Setting:
      title: Setting
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        handle:
          type: string
        content:
          type: object
      x-examples:
        products-example:
          id: v8l4pl01
          name: Products
          handle: products
          content:
            transforms:
              - large_thumbnail
            asset_source: products
    ShippingZone:
      title: ShippingZone
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-examples:
        basic-example:
          id: v8l4pl01
          name: Van Delivery Area
    ShippingMethod:
      allOf:
        - type: object
          properties:
            type:
              type: string
        - $ref: '#/components/schemas/AttributeData'
        - $ref: '#/components/schemas/LocalisedAttributeData'
      x-examples:
        translated-example:
          id: v8l4pl01
          type: regional
          name: Standard Delivery
          description: Next working day
        full-response-example:
          id: v8l4pl01
          type: regional
          attribute_data:
            name:
              webstore:
                en: Standard Delivery
            description:
              webstore:
                en: Next Working Day
    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Tax:
      title: Tax
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        percentage:
          type: number
        default:
          type: boolean
      x-examples:
        tax-example:
          id: xndgx1jz
          name: VAT
          percentage: 20
          default: true
    User:
      title: User
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
    Unauthorized:
      title: Unauthorized
      type: object
      properties:
        error:
          type: string
      x-examples:
        unauthorized-example:
          error: Unauthorized.
    RecycleBin:
      title: Recycle Bin
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        name:
          type: string
        thumbnail:
          type: string
        deleted_at:
          type: string
        recyclable:
          type: object
    PaginatedResponse:
      title: PaginatedResponse
      type: object
      properties:
        meta:
          $ref: './global/models/Pagination.yaml'
        links:
          $ref: '#/components/schemas/Links'
    AssetResponse:
      title: AssetResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Asset'
    AttributeCollection:
      title: AttributeCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Attribute'
        - $ref: '#/components/schemas/PaginatedResponse'
    AttributeResponse:
      title: AttributeResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Attribute'
    Root:
      title: Root
      type: object
      properties:
        version:
          type: string
        locale:
          type: string
        channel:
          type: string
        currency:
          type: string
    AssetSimple:
      title: AssetSimple
      type: object
      properties:
        thumbnail_url:
          type: string
        thumbnail:
          type: string
        url:
          type: string
        filename:
          type: string
        path:
          type: string
    AssociationGroupCollection:
      title: AssociationGroupCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AssociationGroup'
        - $ref: '#/components/schemas/PaginatedResponse'
    AttributeGroupCollection:
      title: AttributeGroupCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AttributeGroup'
        - $ref: '#/components/schemas/PaginatedResponse'
    AttributeGroupResponse:
      title: AttributeGroupResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AttributeGroup'
    BasketCollection:
      title: BasketCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Basket'
        - $ref: '#/components/schemas/PaginatedResponse'
    BasketResponse:
      title: BasketResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Basket'
    CategoryResponse:
      title: CategoryResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Category'
    CategoryCollection:
      title: CategoryCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Category'
        - $ref: '#/components/schemas/PaginatedResponse'
    CollectionResponse:
      title: CollectionResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Collection'
    CollectionCollection:
      title: CollectionCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Collection'
        - $ref: '#/components/schemas/PaginatedResponse'
    CustomerGroupResponse:
      title: CustomerGroupResponse
      type: object
      properties:
        data:
          $ref: './customer-groups/models/CustomerGroup.yaml'
    AddressResponse:
      title: AddressResponse
      type: object
      properties:
        data:
          $ref: './addresses/models/Address.yaml'
    AddressCollection:
      title: AddressCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/PaginatedResponse'
    DiscountCollection:
      title: DiscountCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Discount'
        - $ref: '#/components/schemas/PaginatedResponse'
    DiscountResponse:
      title: DiscountResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Discount'
    LanguageCollection:
      title: LanguageCollection
      allOf:
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Language'
        - $ref: '#/components/schemas/PaginatedResponse'
    LanguageResponse:
      title: LanguageResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Language'
    LayoutResponse:
      title: LayoutResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Layout'
    LayoutCollection:
      title: LayoutCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Language'
        - $ref: '#/components/schemas/Layout'
    ProductCollection:
      title: ProductCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Product'
        - $ref: '#/components/schemas/PaginatedResponse'
    ProductResponse:
      title: ProductResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Product'
    OrderCollection:
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Order'
        - $ref: '#/components/schemas/PaginatedResponse'
    OrderResponse:
      title: OrderResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Order'
    PaymentProviderResponse:
      title: PaymentProviderResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PaymentProvider'
    PaymentProviderCollection:
      title: PaymentProviderCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/PaymentProvider'
        - $ref: '#/components/schemas/PaginatedResponse'
    PermissionResponse:
      title: PermissionResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Permission'
    PermissionCollection:
      title: PermissionCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Permission'
        - $ref: '#/components/schemas/PaginatedResponse'
    ProductRecommendationCollection:
      title: ProductRecommendationCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ProductRecommendation'
        - $ref: '#/components/schemas/PaginatedResponse'
    ProductRecommendationResponse:
      title: ProductRecommendationResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductRecommendation'
    ProductVariantResponse:
      title: ProductVariantResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductVariant'
    ProductVariantCollection:
      title: ProductVariantCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ProductVariant'
        - $ref: '#/components/schemas/PaginatedResponse'
    RecycleBinCollection:
      title: RecycleBinCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/RecycleBin'
        - $ref: '#/components/schemas/PaginatedResponse'
    RoleResponse:
      title: RoleResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Role'
    RoleCollection:
      title: RoleCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Role'
        - $ref: '#/components/schemas/PaginatedResponse'
    SavedBasketResponse:
      title: SavedBasketResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SavedBasket'
    SavedBasketCollection:
      title: SavedBasketCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/SavedBasket'
        - $ref: '#/components/schemas/PaginatedResponse'
    SavedSearchResponse:
      title: SavedSearchResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SavedSearch'
    SavedSearchCollection:
      title: SavedSearchCollection
      allOf:
        - properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/SavedSearch'
      type: object
    SettingResponse:
      title: SettingResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Setting'
    SettingCollection:
      title: SettingCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Setting'
    ShippingMethodResponse:
      title: ShippingMethodResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ShippingMethod'
    ShippingMethodCollection:
      title: ShippingMethodCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ShippingMethod'
        - $ref: '#/components/schemas/PaginatedResponse'
    ShippingPriceCollection:
      title: ShippingPriceCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ShippingPrice'
    ShippingPriceResponse:
      title: ShippingPriceResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ShippingPrice'
    ShippingZoneResponse:
      title: ShippingZoneResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ShippingZone'
    ShippingZoneCollection:
      title: ShippingZoneCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ShippingZone'
        - $ref: '#/components/schemas/PaginatedResponse'
    TagCollection:
      title: TagCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
        - $ref: '#/components/schemas/PaginatedResponse'
    TagResponse:
      title: TagResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Tag'
    TaxCollection:
      title: TaxCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Tax'
        - $ref: '#/components/schemas/PaginatedResponse'
    TaxResponse:
      title: TaxResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Tax'
    TransactionResponse:
      title: TransactionResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Transaction'
    TransactionCollection:
      title: TransactionCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
        - $ref: '#/components/schemas/PaginatedResponse'
    UserResponse:
      title: UserResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
    UserCollection:
      title: UserCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/PaginatedResponse'
    AssetTransformCollection:
      title: AssetTransformCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AssetTransform'
        - $ref: '#/components/schemas/PaginatedResponse'
    AssetTransformResponse:
      title: AssetTransformResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AssetTransform'
    AssociationGroupResponse:
      title: AssociationGroupResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AssociationGroup'
    BasketLineCollection:
      title: BasketLineCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/BasketLine'
        - $ref: '#/components/schemas/PaginatedResponse'
    BasketLineResponse:
      title: BasketLineResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BasketLine'
    RecycleBinResponse:
      title: RecycleBinResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RecycleBin'
    Message:
      title: Message
      type: object
      properties:
        message:
          type: string
    OrderType:
      title: OrderType
      type: object
      properties:
        label:
          type: string
    OrderTypeCollection:
      title: OrderTypeCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderType'
    EmailPreview:
      title: EmailPreview
      type: object
      properties:
        subject:
          type: string
        content:
          type: string
    EmailPreviewResponse:
      title: EmailPreviewResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EmailPreview'
    OrderExport:
      title: OrderExport
      type: object
      properties:
        format:
          type: string
        content:
          type: string
    OrderExportResponse:
      title: OrderExportResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrderExport'
    Invoice:
      title: Invoice
      type: object
      properties:
        encoding:
          type: string
        content:
          type: string
    InvoiceResponse:
      title: InvoiceResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Invoice'
    Search:
      oneOf:
        - $ref: '#/components/schemas/Product'
        - $ref: '#/components/schemas/Category'
    SearchResponse:
      type: object
      title: ''
      x-tags:
        - Search
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Search'
        meta:
          allOf:
            - $ref: './global/models/Pagination.yaml'
            - type: object
              properties:
                aggregation:
                  type: object
                  properties:
                    available:
                      type: array
                      items:
                        $ref: '#/components/schemas/Aggregation'
                    applied:
                      type: array
                      items:
                        $ref: '#/components/schemas/Aggregation'
        links:
          $ref: '#/components/schemas/Links'
      description: ''
    UserFields:
      title: UserFields
      type: object
      properties:
        fields:
          type: object
    UserFieldsResponse:
      title: UserFieldsResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserFields'
    VersionResponse:
      title: VersionResponse
      type: object
    CreateAssetBody:
      title: CreateAssetBody
      type: object
      properties:
        mime_type:
          type: string
          description: Required when passing url
        url:
          type: string
          description: 'External URL to file to upload, required without file'
        file:
          type: object
    UpdateAssetBody:
      title: UpdateAssetBody
      type: object
      properties:
        assets:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              tags:
                type: array
                items:
                  type: string
            required:
              - id
    AssetSimpleUploadBody:
      title: AssetSimpleUploadBody
      type: object
      properties:
        file:
          type: object
      required:
        - file
    AssetDetachBody:
      title: AssetDetachBody
      type: object
      properties:
        attributes:
          type: array
          description: 'attributeId => position'
          items:
            type: object
    AttributesOrderUnprocessableResponse:
      title: AttributesOrderUnprocessableResponse
      type: object
      properties:
        attributes:
          type: array
          items:
            type: string
    AttributesReorderBody:
      title: AttributesReorderBody
      type: object
      properties:
        groups:
          type: array
          items:
            type: object
            properties:
              groupId:
                type: integer
                format: int32
    ReorderAttributesUnprocessableResponse:
      title: ReorderAttributesUnprocessableResponse
      type: object
      properties:
        id:
          type: string
    CreateAttributeGroupBody:
      title: CreateAttributeGroupBody
      type: object
      properties:
        name:
          type: object
          required:
            - en
          properties:
            en:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
    AccountPasswordResetBody:
      title: PasswordResetBody
      type: object
      properties:
        password_confirmation:
          type: string
        password:
          type: string
        current_password:
          type: string
      required:
        - current_password
        - password
        - password_confirmation
    ResolveBasketBody:
      title: ResolveBasketBody
      type: object
      properties:
        merge:
          type: boolean
          default: false
        basket_id:
          type: string
      required:
        - basket_id
    SaveBasketBody:
      title: SaveBasketBody
      type: object
      properties:
        name:
          type: string
      required:
        - name
    AddBasketMetaBody:
      title: AddBasketMetaBody
      type: object
      properties:
        value:
          type: string
        key:
          type: string
      required:
        - key
        - value
    CreateBasketLinesBody:
      title: CreateBasketLinesBody
      type: object
      properties:
        variants:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              quantity:
                type: integer
              meta:
                type: object
        basket_id:
          type: string
    BasketLineUpdateBody:
      title: BasketLineUpdateBody
      type: object
      properties:
        quantity:
          type: integer
    UpdateChannelBody:
      $ref: './channels/requests/CreateChannelBody.yaml'
    CreateCategoryBody:
      title: CreateCategoryBody
      type: object
      properties:
        url:
          type: string
        path:
          type: string
        name:
          type: object
          required:
            - en
          properties:
            en:
              type: string
      required:
        - name
        - path
        - url
    UpdateAttributesBody:
      title: UpdateAttributesBody
      type: object
      properties:
        attributes:
          type: object
      required:
        - attributes
    UpdateCategoryBody:
      $ref: '#/components/schemas/CreateCategoryBody'
    UpdateAttributeBody:
      title: UpdateAttributeBody
      type: object
      properties:
        attributes:
          type: object
      required:
        - attributes
    ReorderCategoryBody:
      title: ReorderCategoryBody
      type: object
      properties:
        action:
          type: string
          description: 'before, after, over'
        moved_node:
          type: string
          description: The ID of the category which moved
        node:
          type: string
          description: The id of the category affected
      required:
        - node
        - moved_node
    AttachCategoryProductsBody:
      title: AttachCategoryProductsBody
      type: object
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              position:
                type: integer
                format: int32
                example: 1
        sort_type:
          type: string
          description: 'custom, min_price:asc, min_price:desc, sku:asc, sku:desc'
    AttachCategoryChannelsBody:
      title: AttachCategoryChannelsBody
      type: object
      properties:
        channels:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              published_at:
                type: string
            required:
              - id
              - published_at
      required:
        - channels
    AttachCategoryCustomerGroupsBody:
      title: AttachCategoryCustomerGroupsBody
      type: object
      properties:
        groups:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              visible:
                type: boolean
              purchasable:
                type: boolean
    CategoryAttachLayoutBody:
      title: CategoryAttachLayoutBody
      type: object
      properties:
        layout_id:
          type: string
    AttachCategoryRoutesBody:
      title: AttachCategoryRoutesBody
      type: object
      properties:
        redirect:
          type: boolean
        description:
          type: string
        slug:
          type: string
        locale:
          type: string
    AssetCollection:
      title: AssetCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    AssetsInclude:
      title: AssetsInclude
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    ProductAssociation:
      title: ProductAssociation
      type: object
      properties:
        id:
          type: string
        association:
          $ref: '#/components/schemas/ProductResponse'
        group:
          $ref: '#/components/schemas/AssociationGroupResponse'
    ProductAssociationCollection:
      title: ProductAssociationCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductAssociation'
    ProductAssociationResponse:
      title: ProductAssociationResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductAssociation'
    VersionCollection:
      title: VersionCollection
      type: object
      properties:
        data:
          $ref: '#/components/schemas/VersionResponse'
    OrderLine:
      title: OrderLine
      type: object
      properties:
        id:
          type: string
        quantity:
          type: integer
        line_total:
          type: integer
        discount_total:
          type: integer
        delivery_total:
          type: integer
        unit_price:
          type: integer
        unit_qty:
          type: integer
        tax_total:
          type: integer
        tax_rate:
          type: integer
        description:
          type: string
        option:
          type: string
        sku:
          type: string
        is_shipping:
          type: boolean
        is_manual:
          type: boolean
        meta:
          type: object
    OrderLineCollection:
      title: OrderLineCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderLine'
    OrderLineResponse:
      title: OrderLineResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrderLine'
    ActivityLog:
      title: ActivityLog
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        description:
          type: string
        properties:
          type: string
        created_at:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
    ActivityLogResponse:
      title: ActivityLogResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ActivityLog'
    ActivityLogCollection:
      title: ActivityLogCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLog'
    CustomerPrice:
      title: CustomerPrice
      type: object
      properties:
        id:
          type: string
        price:
          type: number
        tax:
          $ref: '#/components/schemas/TaxResponse'
        group:
          $ref: '#/components/schemas/CustomerGroupResponse'
    CustomerPriceResponse:
      title: CustomerPriceResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CustomerPrice'
    CustomerPriceCollection:
      title: CustomerPriceCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomerPrice'
    ProductTierPrice:
      title: ProductTierPrice
      type: object
      properties:
        id:
          type: string
        lower_limit:
          type: integer
        price:
          type: number
        tax:
          type: number
        group:
          $ref: '#/components/schemas/CustomerGroupResponse'
    ProductTierPriceResponse:
      title: ProductTierPriceResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductTierPrice'
    ProductTierPriceCollection:
      title: ProductTierPriceCollection
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductTierPrice'
    ProductUpdateBody:
      title: ProductUpdateBody
      type: object
      properties:
        attribute_data:
          type: object
        family_id:
          type: string
    CreateBasketBody:
      title: CreateBasketBody
      type: object
      properties:
        variants:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              quantity:
                type: integer
            required:
              - id
              - quantity
        basket_id:
          type: string
    CreateOrderBody:
      title: CreateOrderBody
      type: object
      properties:
        basket_id:
          type: string
        include:
          type: string
      required:
        - basket_id
    PaymentType:
      title: PaymentType
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        handle:
          type: string
        driver:
          type: string
        success_status:
          type: string
    PaymentTypeResponse:
      title: PaymentTypeResponse
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PaymentType'
    PaymentTypeCollection:
      title: PaymentTypeCollection
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/PaymentType'
        - $ref: '#/components/schemas/PaginatedResponse'
    Aggregation:
      title: Aggregation
      type: object
      properties:
        handle:
          type: string
        doc_count:
          type: integer
        data:
          type: object
        buckets:
          type: array
          items: {}
    Country:
      title: Country
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        region:
          type: string
        iso_a_2:
          type: string
        iso_a_3:
          type: string
        iso_numeric:
          type: string
    CountryResponse:
      title: CountryResponse
      type: object
      properties:
        data:
          $ref: './countries/models/Country.yaml'
      x-tags:
        - Countries
    CreateAddressBody:
      title: CreateAddressBody
      type: object
      properties:
        salutation:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        company_name:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        address_two:
          type: string
        address_three:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country_id:
          type: string
        shipping:
          type: boolean
        user_id:
          type: string
        billing:
          type: boolean
        default:
          type: boolean
        last_used_at:
          type: string
        delivery_instructions:
          type: string
        meta:
          type: array
          items: {}
      required:
        - firstname
        - lastname
        - address
        - city
        - state
        - postal_code
        - country_id
      x-tags:
        - Addresses
    UpdateAddressBody:
      title: UpdateAddressBody
      type: object
      x-tags:
        - Addresses
      properties:
        salutation:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        company_name:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        address_two:
          type: string
        address_three:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country_id:
          type: string
        shipping:
          type: boolean
        billing:
          type: boolean
        default:
          type: boolean
        last_used_at:
          type: string
        delivery_instructions:
          type: string
        meta:
          type: array
          items: {}
  securitySchemes:
    auth:
      type: oauth2
      flows:
        password:
          tokenUrl: 'http://localhost:3000/api/v1/oauth/token'
          refreshUrl: 'http://localhost:3000/api/v1/oauth/refresh'
          scopes: {}
        clientCredentials:
          tokenUrl: 'http://localhost:3000/api/v1/oauth/token'
          scopes: {}
          refreshUrl: 'http://localhost:3000/api/v1/oauth/refresh'
      description: ''
tags:
  - name: Channels
    description: Store channels
  - name: Categories
    description: Catalogue Management
  - name: Authentication
    description: Everything to authenticate requests
  - name: Orders
    description: Order Processing
  - name: Attributes
    description: Catalogue Management
  - name: Assets
    description: Catalogue Management
  - name: Associations
    description: Catalogue Management
  - name: Baskets
    description: Order Processing
  - name: Payments
    description: Order Processing
  - name: Collections
    description: Catalogue Management
  - name: Customers
    description: Order Processing
  - name: Discounts
    description: Order Processing
  - name: Languages
    description: System Settings
  - name: Layouts
    description: Catalogue Management
  - name: Products
    description: Catalogue Management
  - name: Product Variants
    description: Catalogue Management
  - name: Taxes
    description: System Settings
